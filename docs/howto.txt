ffota
-----

概述
----

ffota 是一个用于 android 的 OTA 升级程序。包含了 OTA 服务器程序和客户端 apk.

OTA 服务器，为静态 http 服务器，使用 github 的 github.io 可以很简单的实现 http 服务器功能。
同时使用 github 可以方便的利用 git 仓库来管理 OTA 升级包的发布。所以这个 ffota 的 github 仓库本身就是 ffota 的服务器。

OtaUpdate 是 OTA 客户端 apk 的源代码，提供了 OTA 升级更新检测、下载、校验和升级的全部功能。



功能说明
--------
1. 基于 github 就可以实现 OTA 升级服务器，简单方便
2. 客户端同时支持 http 和 https 两种协议
3. 所有文件都放在 files 目录下，命名规则合理，目录结构简单，便于管理
4. 客户端支持断点续传下载，自动更新，通知提醒等
5. 基于 md5 的下载校验，保证升级文件的可靠性
6. 即使不用 github 可以部署自己的 http 服务器



运行原理
--------
客户端根据 ro.product.otaid，android 版本号，build number 这个几个标识符，生成 ota 升级检测字符串。

举例说明

ro.product.otaid=A64-17303-FANFAN
对应全志 A64 平台，17303 项目，fanfan 客户

android 版本号为：5.1.1

build number 为：20180102

生成检测字符串为 A64-17303-FANFAN-5.1.1-20180102.ini

客户端会访问
https://rockcarry.github.io/ffota/files/A64-17303-FANFAN-5.1.1-20180102.ini

如果能获取到数据，那么说明这个机型在当前版本 20180102 下，是有可用升级文件的

客户端会根据 .ini 配置文件，去下载对应的 android ota 升级包，然后执行升级

而服务器仅仅是一个静态的 http 下载服务器，这里面没有复杂的业务逻辑，所以我们简化了服务器端，而将所有的检测逻辑做到了客户端的 app 里面去。



升级配置文件说明
----------------

文件命名就是以前面提到的检测字符串的命令方式来命名的，扩展名为 .ini

文件实际保存内容如下：

+---------------------------------------------------+
target : 20180105
md5    : 7f6c96af72889296d648cc7c122e176c

[en]
<<<
OTA update test
>>>

[zh]
<<<
OTA 升级测试
OTA 升级测试包
用于测试 OTA 升级是否正常
>>>
+---------------------------------------------------+

target 是目标升级版本的 build number
md5    是目标升级文件的 md5 checksum

[en] [zh] 字段下分别对应多国语言的详细升级说明信息。
<<<
说明信息需要放在 <<< 和 >>> 之间，这个仅仅是因为客户端是按照这个格式进行解析的
记住 <<< 和 >>> 一定要独立放一行，一行里面刚好这 3 个字符，不能多也不能少
>>>

客户端解析 .ini 升级配置文件后，会解析出 target 字段。举例说明：

如果 target 为 20180105，那么客户端就会下载 A64-17303-FANFAN-5.1.1-20180102-to-20180105.zip
这个升级包。下载成功后，就执行升级。

对应升级包在服务器上的存放地址为：
https://rockcarry.github.io/ffota/files/A64-17303-FANFAN-5.1.1-20180102-to-20180105.zip



使用方法
--------
1. 设备端固件配置一个 ro.product.otaid
2. 修改并编译 OtaUpdate apk 预置到固件中
3. 如果有固件更新，生成正确的升级包和 .ini 文件
4. 将 .ini 和 .zip 提交 git 仓库，并 push 到 github
5. 客户端打开 OtaUpdate 检测更新并升级



注意事项
--------
个人测试和小批量的 OTA 升级需求，可以使用 github，且尽量使用体积小的差分包升级方式。
如果有量产大量的机器，建议自己搭建 http 服务器。一方面保证产品 OTA 的稳定性，另一方面如果这个把 github 搞挂掉了，我也感觉有点对不起人家呢。



rockcarry
2018-1-9






